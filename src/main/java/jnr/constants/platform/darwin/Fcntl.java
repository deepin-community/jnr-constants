// WARNING: This file is autogenerated. DO NOT EDIT!
// Generated 2018-09-20 11:35:39 -0500
package jnr.constants.platform.darwin;
public enum Fcntl implements jnr.constants.Constant {
FAPPEND(8L),
FREAD(1L),
FWRITE(2L),
FASYNC(64L),
FFSYNC(128L),
FNONBLOCK(4L),
FNDELAY(4L),
F_DUPFD(0L),
F_GETFD(1L),
F_SETFD(2L),
F_GETFL(3L),
F_SETFL(4L),
F_GETOWN(5L),
F_SETOWN(6L),
F_GETLK(7L),
F_SETLK(8L),
F_SETLKW(9L),
F_CHKCLEAN(41L),
F_PREALLOCATE(42L),
F_SETSIZE(43L),
F_RDADVISE(44L),
F_RDAHEAD(45L),
// F_READBOOTSTRAP not defined
// F_WRITEBOOTSTRAP not defined
F_NOCACHE(48L),
F_LOG2PHYS(49L),
F_GETPATH(50L),
F_FULLFSYNC(51L),
F_PATHPKG_CHECK(52L),
F_FREEZE_FS(53L),
F_THAW_FS(54L),
F_GLOBAL_NOCACHE(55L),
F_ADDSIGS(59L),
// F_MARKDEPENDENCY not defined
F_RDLCK(1L),
F_UNLCK(2L),
F_WRLCK(3L),
F_ALLOCATECONTIG(2L),
F_ALLOCATEALL(4L);
private final long value;
private Fcntl(long value) { this.value = value; }
public static final long MIN_VALUE = 0L;
public static final long MAX_VALUE = 128L;

static final class StringTable {
  public static final java.util.Map<Fcntl, String> descriptions = generateTable();
  public static final java.util.Map<Fcntl, String> generateTable() {
    java.util.Map<Fcntl, String> map = new java.util.EnumMap<Fcntl, String>(Fcntl.class);
  map.put(FAPPEND, "FAPPEND");
  map.put(FREAD, "FREAD");
  map.put(FWRITE, "FWRITE");
  map.put(FASYNC, "FASYNC");
  map.put(FFSYNC, "FFSYNC");
  map.put(FNONBLOCK, "FNONBLOCK");
  map.put(FNDELAY, "FNDELAY");
  map.put(F_DUPFD, "F_DUPFD");
  map.put(F_GETFD, "F_GETFD");
  map.put(F_SETFD, "F_SETFD");
  map.put(F_GETFL, "F_GETFL");
  map.put(F_SETFL, "F_SETFL");
  map.put(F_GETOWN, "F_GETOWN");
  map.put(F_SETOWN, "F_SETOWN");
  map.put(F_GETLK, "F_GETLK");
  map.put(F_SETLK, "F_SETLK");
  map.put(F_SETLKW, "F_SETLKW");
  map.put(F_CHKCLEAN, "F_CHKCLEAN");
  map.put(F_PREALLOCATE, "F_PREALLOCATE");
  map.put(F_SETSIZE, "F_SETSIZE");
  map.put(F_RDADVISE, "F_RDADVISE");
  map.put(F_RDAHEAD, "F_RDAHEAD");
  map.put(F_NOCACHE, "F_NOCACHE");
  map.put(F_LOG2PHYS, "F_LOG2PHYS");
  map.put(F_GETPATH, "F_GETPATH");
  map.put(F_FULLFSYNC, "F_FULLFSYNC");
  map.put(F_PATHPKG_CHECK, "F_PATHPKG_CHECK");
  map.put(F_FREEZE_FS, "F_FREEZE_FS");
  map.put(F_THAW_FS, "F_THAW_FS");
  map.put(F_GLOBAL_NOCACHE, "F_GLOBAL_NOCACHE");
  map.put(F_ADDSIGS, "F_ADDSIGS");
  map.put(F_RDLCK, "F_RDLCK");
  map.put(F_UNLCK, "F_UNLCK");
  map.put(F_WRLCK, "F_WRLCK");
  map.put(F_ALLOCATECONTIG, "F_ALLOCATECONTIG");
  map.put(F_ALLOCATEALL, "F_ALLOCATEALL");
    return map;
  }
}
public final String toString() { return StringTable.descriptions.get(this); }
public final int value() { return (int) value; }
public final int intValue() { return (int) value; }
public final long longValue() { return value; }
public final boolean defined() { return true; }
}
